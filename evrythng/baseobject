 /**
 * Base object used to factor out behavior that is shared accross
 * all objects (device APIs)
 * This is an abstract class, not to be istanciated 
 * @class BaseObject
 * @constructor BaseObject
 * @param {Object} [dto]: initialization data of the account instance
 * @param {Object} client: instance of the http client (optional, subclasses should decide if mandatory)
 * @throws Error
 */
function BaseObject(dto, client) {
  
  if (!dto) {
   
    throw {
      
      errorCode: "Invalid_Parameter",
      errorDetail: this.constructor.name + ". dto cannot be null or empty"
    };
  }
  
  if (!dto.inheritance) {
   
    for (var prop in dto) {
      this[prop] = dto[prop];
    }

    this.client = client;
  }
}