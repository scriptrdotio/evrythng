 var thngModule = require("./thng");

/**
 * @class ThngManager
 * @constructor
 * @param {Object} [dto]
 * @param {Object} [dto.client]: instance of ./client.Client 
 */
function ThngManager(dto) {
  
  if (!dto || !dto.client) {
   
    throw {
      
      errorCode: "Invalid_Parameter",
      errorDetail: "ThingManager. dto and dto.client cannot be null or empty"
    };
  }
  
  this.client = dto.client;
}

/**
 * Create an instance of thng (thing) on the Evrythng platform from a instance of /thng.Thng
 * @method createThing
 * @param {Object} thing : key/values representing the future Thng
 * @return {Object} instance of ./thng.Thng, with id and creation date
 * @throws Error
 */
ThngManager.prototype.createThing = function(thing) {
  
  if (!thing) {
   
    throw {
      
      errorCode: "Invalid_Parameter",
      errorDetail: "ThingManager.createThing: thingParams cannot be null or empty"
    };
  }
   
  var instructionParams = {
    
    method: "POST",
    url: "/thngs",
    headers: {
      "Content-Type": "application/json"
    },
    params: thing
  };
  
  var response = this.client.callApi(instructionParams);
  return new thngModule.Thng(response.body, this.client);
};


/** 
 * @method listThings
 * @param {Object} [pagination] (optional)
 * @param {String} [pagination.sortOrder] : one of "DESCENDING" or "ASCENDING" &perPage=10 
 * @param {Numeric} [pagination.perPage] : page size, from 1 to 100, defaults to 30
 * @param {String} [pagination.next] : token of next page, if provided means with a moving forward in the list
 * @param {String} [pagination.previous] : token of previous page, if provided means with a moving backeard in the list
 * (if next and previous are provided, is discarded)
 * @return {Array} array of instances of ./thng.Thng
 * @throws Error
 */
ThngManager.prototype.listThings = function(pagination) {
  
  var url = "/thngs";  
  
  if (pagination) {
    
    if (pagination.next) {
      url = pagination.next
    }else {
      
      if (pagination.previous) {
        url = pagination.previous;
      }else {
        
        url += pagination.sortOrder ? "?sortOrder=" + pagination.sortOrder.toUpperCase() : url;
      	url += pagination.perPage ? (url.indexOf("?") == -1 ? url + "?perPage=" + pagination.perPage : url + "&perPage=" + pagination.perPage) : url;
      }
    }
  }
  
  var instructionParams = {
    
    method: "GET",
    url: url
  };
  
  var response = this.client.callApi(instructionParams);console.log(JSON.stringify(response));
  var thingsList = [];
  for (var i = 0; i < response.body.length; i++) {
    thingsList.push(new thngModule.Thng(response.body[i], this.client));
  }
  
  return {
    things: thingsList,
    nextPageToken: response.next
  };
};

/** 
 * @method getThing
 * @param {String} thingId
 * @return {Object} instance of ./thng.Thng
 * @throws Error
 */
ThngManager.prototype.getThing = function(thingId) {
  
  if (!thingId) {
   
    throw {
      
      errorCode: "Invalid_Parameter",
      errorDetail: "ThingManager.getThing: thingId cannot be null or empty"
    };
  }
  
  var instructionParams = {
    
    method: "GET",
    url: "/thngs/" + thingId
  };
  
  var response = this.client.callApi(instructionParams);
  return new thngModule.Thng(response.body, this.client);
};

/** 
 * @method deleteThing
 * @param {String} thingId
 * @return {Object} 
 * @throws Error
 */
ThngManager.prototype.deleteThing = function(thingId) {
  
  if (!thingId) {
   
    throw {
      
      errorCode: "Invalid_Parameter",
      errorDetail: "ThingManager.deleteThing: thingId cannot be null or empty"
    };
  }
  
  var instructionParams = {
    
    method: "DELETE",
    url: "/thngs/" + thingId
  };
  
  return this.client.callApi(instructionParams);
};