 /**
 * @class ActionManager
 * @constructor
 * @param {Object} [dto]
 * @param {Object} [dto.client]: instance of ./client.Client
 * @throws Error
 */
function ActionManager(dto) {
  
  if (!dto || !dto.client) {
   
    throw {
      
      errorCode: "Invalid_Parameter",
      errorDetail: "ActionManager. dto and dto.client cannot be null or empty"
    };
  }
  
  this.client = dto.client;
}

/**
 * Create a new action of a given type if specified
 * @method createAction
 * @param {Object} [dto] action properties
 * @param {String} [dto.type] : the type of the action (mandatory). Check ./common.actionTypes for possible values or create your own
 * @param {String} [dto.thng] : the EVRYTHNG id of the thng this action was carried out onto. For example, the id of the thng a user has scanned or checked into.
 * @param {String} [dto.product] : the EVRYTHNG product id associated with the thng this action was carried out onto
 * @param {String} [dto.collection] : The EVRYTHNG id of the collection this action will be carried out onto. Only available for actions with custom action type
 * @param {Numeric} [dto.timestamp] : The timestamp when the action took place. If unspecified, filled automatically when processed using the server clock.
 * @param {Object} [dto.identifiers] : key/value pairs representing various identifiers (EPC, ISBN, etc.) for an object 
 * @param {Object} [dto.location] : The location where the action took place. If you set this parameter, you must also set the locationSource  
 * {position: { type: Point_Obj, coordinates: [Number, Number]}
 * @param {String} [dto.locationSource] : the method used to retrieve the location : can be "sensor" (e.g. GPS), "geoIp" (retrieved automatically based on the client IP address), or "unknown"
 * @param {Object} [dto.context] : key/value pais representing any contextual information to be stored
 * @param {Object} [dto.customFields] : key/value pairs representing custom fields of the type to create
 * @param {Array} [dto.tags] : list of tag names to associated to the action type
 * @return {Object} action data
 * @throws Error
 */
ActionManager.prototype.createAction = function(dto) {
  
   if (!dto || !dto.type) {
   
    throw {
      
      errorCode: "Invalid_Parameter",
      errorDetail: "ActionManager.createAction: dto and dto.type cannot be null or empty"
    };
  }
   
  var instructionParams = {
    
    method: "POST",
    url: "/actions/" + dto.type,
    headers: {
      "Content-Type": "application/json"
    },
    params: dto
  };
  
  return this.client.callApi(instructionParams);
};


/** 
 * @method listActions
 * @param {String} type: filter by action type if specified (optional)
 * @return {Array} array of action data
 * @throws Error
 */
ActionManager.prototype.listActions = function(type) {
  
  var instructionParams = {
    
    method: "GET",
    url: "/actions" + (type ? "/" + type : "/all")
  };
  
  return this.client.callApi(instructionParams);
};

/** 
 * @method getAction
 * @param {String} actionId
 * @param {String} type
 * @return {Object} action data
 * @throws Error
 */
ActionManager.prototype.getAction = function(actionId, type) {
  
  if (!actionId) {
   
    throw {
      
      errorCode: "Invalid_Parameter",
      errorDetail: "ActionManager.getAction: actionId cannot be null or empty"
    };
  }
  
  var instructionParams = {
    
    method: "GET",
    url: "/actions/" + (type ? type : "all") + "/" + actionId
  };
  
  return this.client.callApi(instructionParams);
};

/** 
 * @method deleteAction
 * @param {String} actionId
 * @return {Object} 
 * @throws Error
 */
ActionManager.prototype.deleteAction = function(actionId) {
  
  if (!actionId) {
   
    throw {
      
      errorCode: "Invalid_Parameter",
      errorDetail: "ActionManager.deleteAction: actionId cannot be null or empty"
    };
  }
  
  var instructionParams = {
    
    method: "DELETE",
    url: "/thngs/" + actionId
  };
  
  return this.client.callApi(instructionParams);
};

/**
 * Create a new action type
 * @method createActionType
 * @param {Object} [dto] action type properties
 * @param {String} [dto.name] : the type of the custom actions type (mandatory)
 * @param {Object} [dto.customFields] : key/value pairs representing custom fields of the type to create
 * @param {Array} [dto.tags] : list of tag names to associated to the action type
 * @return {Object} action data
 * @throws Error
 */
ActionManager.prototype.createActionType = function(dto) {
  
   if (!dto || !dto.name) {
   
    throw {
      
      errorCode: "Invalid_Parameter",
      errorDetail: "ActionManager.createActionType: dto and dto.name cannot be null or empty"
    };
  }
  
  if (!dto.name.indexOf(0) == "_") { // custom action type names should be prefixed with "/"
    dto.name = "_" +  name;
  }
   
  var instructionParams = {
    
    method: "POST",
    url: "/actions",
    headers: {
      "Content-Type": "application/json"
    },
    params: dto
  };
  
  return this.client.callApi(instructionParams);
};

/**
 * Update an existing action type
 * @method updateActionTyp
 * @param {String} typeName : the type of the custom actions type (mandatory)
 * @param {Object} [dto] action type properties to update
 * @param {Object} [dto.customFields] : key/value pairs representing custom fields of the type to create
 * @param {Array} [dto.tags] : list of tag names to associated to the action type
 * @return {Object} action data
 * @throws Error
 */
ActionManager.prototype.updateActionType = function(typeName, dto) {
  
   if (!dto || !dto.typeName) {
   
    throw {
      
      errorCode: "Invalid_Parameter",
      errorDetail: "ActionManager.updateActionType: dto and dto.typeName cannot be null or empty"
    };
  }
  
  if (!dto.typeName.indexOf(0) == "_") { // custom action type names should be prefixed with "/"
    typeName = "_" +  typeName;
  }
   
  var instructionParams = {
    
    method: "PUT",
    url: "/actions/" + typeName,
    headers: {
      "Content-Type": "application/json"
    },
    params: dto
  };
  
  return this.client.callApi(instructionParams);
};

/** 
 * @method listActionTypes
 * @throws Error
 */
ActionManager.prototype.listActionTypes = function() {
  
  var instructionParams = {
    
    method: "GET",
    url: "/actions"
  };
  
  return this.client.callApi(instructionParams);
};
