 var collectionModule= require("./collection");

/**
 * @class CollectionManager
 * @constructor
 * @param {Object} [dto]
 * @param {Object} [dto.client]: instance of ./client.Client
 * @throws Error
 */
function CollectionManager(dto) {
  
  if (!dto || !dto.client) {
   
    throw {
      
      errorCode: "Invalid_Parameter",
      errorDetail: "CollectionManager. dto and dto.client cannot be null or empty"
    };
  }
  
  this.client = dto.client;
}

/**
 * Create a new collection 
 * @method createCollection
 * @param {String} [dto.name] : the name of the collection(mandatory)
 * @param {String} [dto.description] : decription of the collection 
 * @param {Array} [dto.collections] : An array of Refs as Strings representing the Collections the Collection belongs to. Cannot be specified on creation nor on update.
 * @param {Object} [dto.customFields] : key/value pairs representing custom fields of the collection to create
 * @param {Array} [dto.tags] : list of tag names to associated to the collection
 * @return {Object} an instance of ./collection.Collection
 * @throws Error
 */
CollectionManager.prototype.createCollection = function(dto) {
  
   if (!dto || !dto.name) {
   
    throw {
      
      errorCode: "Invalid_Parameter",
      errorDetail: "CollectionManager.createCollection: dto and dto.name cannot be null or empty"
    };
  }
   
  var instructionParams = {
    
    method: "POST",
    url: "/collections",
    headers: {
      "Content-Type": "application/json"
    },
    params: dto
  };
  
  var response = this.client.callApi(instructionParams);
  return new collectionModule.Collection(response, this.client);
};


/** 
 * @method listCollections
 * @return {Array} array of ./collections.Collection instances
 * @throws Error
 */
CollectionManager.prototype.listCollections = function() {
  
  var instructionParams = {
    
    method: "GET",
    url: "/collections"
  };
  
  var response = this.client.callApi(instructionParams);
  var collectionList = [];
  for (var i = 0; i < response.length; i++) {
    collectionList.push(new collectionModule.Collection(response[i], this.client));    
  }
  
  return collectionList;
};

/** 
 * @method getCollection
 * @param {String} collectionId
 * @return {Object} instance of ./collection.Collection
 * @throws Error
 */
CollectionManager.prototype.getCollection = function(collectionId) {
  
  if (!collectionId) {
   
    throw {
      
      errorCode: "Invalid_Parameter",
      errorDetail: "CollectionManager.getAction: actionId cannot be null or empty"
    };
  }
  
  var instructionParams = {
    
    method: "GET",
    url: "/collections/" + collectionId
  };
  
  var reponse = this.client.callApi(instructionParams);
  return new collectionModule.Collection(response, collection);
};

/** 
 * @method deleteCollection
 * @param {String} collectionId
 * @return {Object} 
 * @throws Error
 */
CollectionManager.prototype.deleteCollection = function(collectionId) {
  
  if (!actionId) {
   
    throw {
      
      errorCode: "Invalid_Parameter",
      errorDetail: "CollectionManager.deleteAction: actionId cannot be null or empty"
    };
  }
  
  var instructionParams = {
    
    method: "DELETE",
    url: "/collections/" + collectionId
  };
  
  return this.client.callApi(instructionParams);
};